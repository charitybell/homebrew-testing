name: Build and release

on:
  push:
    branches:
      - 'main'
    paths:
      - 'Casks/**.rb'
      - 'Formula/**.rb'

env:
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  prepare:
    outputs:
      casks: ${{ steps.set-output-matrix.outputs.casks }}
      formula: ${{ steps.set-output-matrix.outputs.formula }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Homebrew/actions/setup-homebrew@master

    - id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: |
          Casks/*.rb
          Formula/*.rb
        files_ignore: |
          Formula/*@*.rb
        json: true
        json_raw_format: true

    - id: set-output-matrix
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      run: |
        echo "casks=$(echo "$CHANGED_FILES" | jq -rc '[.[] | select(. | startswith("Casks"))]')" >> "$GITHUB_OUTPUT"
        echo "formula=$(echo "$CHANGED_FILES" | jq -rc '[.[] | select(. | startswith("Formula"))]')" >> "$GITHUB_OUTPUT"

  tag-casks:
    needs: prepare
    if: ${{ needs.prepare.outputs.casks != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: Homebrew/actions/git-user-config@master

      - uses: Homebrew/actions/setup-homebrew@master

      - uses: charitybell/set-git-creds@main

      - name: tag casks
        run: |
          for cask in $(echo '${{ needs.prepare.outputs.casks }}' | jq -rc .[]); do
            FORMULA_NAME="$(basename "$cask" .rb)"
            FORMULA_VERSION=$(grep "version " "$cask" | head -n 1 | awk '{ print $2 }' | cut -d '"' -f 2)
            TAG_MESSAGE="${FORMULA_NAME}-${FORMULA_VERSION}"

            git tag -a "$TAG_MESSAGE" -m "$TAG_MESSAGE"
          done
          git -c push.default=current push --tags
          git -c push.default=current push

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.formula != '[]' }}
    strategy:
      matrix:
        formula: ${{ fromJSON(needs.prepare.outputs.formula) }}
        os: ${{ fromJSON(vars.RUNNERS) }}
    uses: ./.github/workflows/build-bottle.yml
    with:
      formula: ${{ matrix.formula }}
      runs-on: ${{ matrix.os }}

  tag:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    outputs:
      tag-array: ${{ steps.bottle-and-tag.outputs.tag-array }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: Homebrew/actions/setup-homebrew@master

      - uses: actions/download-artifact@v3
        with:
          name: formula-bottles

      - uses: fregante/setup-git-user@v2

      - uses: dcarbone/install-jq-action@v1.0.1

      - uses: charitybell/set-git-creds@main

      - name: bottle and tag
        id: bottle-and-tag
        env:
          GITHUB_REPO_URL: ${{ github.server_url}}/${{ github.repository }}
        run: |
          declare -A tag_array
          for formula in $(echo '${{ needs.prepare.outputs.formula }}' | jq -rc .[]); do
            FORMULA_NAME="$(basename "$formula" .rb)"
            BOTTLE_FILE="$(find . -type f -name "$FORMULA_NAME-*bottle.*json" -print -quit)"
            FORMULA_TAP="$(echo "$GITHUB_REPOSITORY" | cut -d / -f 1)/$(echo "$GITHUB_REPOSITORY" | cut -d / -f 2 | cut -d - -f 2)"
            FORMULA_FULL_NAME="$FORMULA_TAP/$FORMULA_NAME"
            FORMULA_VERSION=$(jq -cr .['"'"$FORMULA_FULL_NAME"'"'].formula.pkg_version "$BOTTLE_FILE")
            TAG_MESSAGE="${FORMULA_NAME}-${FORMULA_VERSION}"

            brew bottle --merge --write "$BOTTLE_FILE"

            git tag -a "$TAG_MESSAGE" -m "$TAG_MESSAGE"
            tag_array["$formula"]="$TAG_MESSAGE"
          done
          git -c push.default=current push --tags
          git -c push.default=current push

          output_json=$(comma=''; echo -n '{' ; for key in "${!tag_array[@]}"; do echo -n $comma '"'"$key"'"':'"'"${tag_array[$key]}"'"'; comma=","; done; echo -n "}")
          echo "tag-array=$output_json" >> "$GITHUB_OUTPUT"

  release:
    needs: [prepare, build, tag]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        formula: ${{ fromJSON(needs.prepare.outputs.formula) }}
    steps:
      - uses: dcarbone/install-jq-action@v1.0.1

      - uses: actions/download-artifact@v3
        with:
          name: formula-bottles

      - id: get-bottle-names
        env:
          FORMULA: ${{ matrix.formula }}
        run: |
          echo "value=$(echo "$(basename "$FORMULA" .rb)-*bottle.*tar.gz")" >> "$GITHUB_OUTPUT"

      - id: get-tag-name
        run: |
          echo '${{ matrix.formula }}'
          echo '${{ needs.tag.outputs.tag-array }}'
          echo '${{ needs.tag.outputs.tag-array }}' | jq -rc .['"'${{ matrix.formula }}'"']
          TAG_NAME=$(echo '${{ needs.tag.outputs.tag-array }}' | jq -rc .['"'${{ matrix.formula }}'"'])
          echo "tag-name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Release (${{ matrix.formula }})
        uses: softprops/action-gh-release@v1
        with:
          tag_name: '${{ steps.get-tag-name.outputs.tag-name }}'
          # the multiline string is needed, otherwise the `*` globs break yaml syntax
          files: |
            ${{ steps.get-bottle-names.outputs.value }}
